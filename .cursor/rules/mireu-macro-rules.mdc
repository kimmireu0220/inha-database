---
alwaysApply: true
---
# Mireu Macro - 종합 개발 규칙

## 🎯 **핵심: 반드시 따라야 할 규칙들**

### **언어 및 커뮤니케이션**
- **항상** 사용자와의 소통은 한국어로 응답
- **항상** 모든 주석, docstring, 문서를 한국어로 작성
- **절대** 코드 주석이나 문서에서 영어 사용 금지
- **항상** 오류 메시지와 사용자 대면 텍스트를 한국어로 작성

### **코드 구조 및 조직**
- **항상** 각 모듈에 단일 책임 원칙 적용
- **항상** 상수를 클래스 기반 구조로 `constants.py` 파일에 배치
- **항상** import 순서: 표준 라이브러리 → 서드파티 → 로컬
- **절대** 모듈 간 순환 import 금지
- **항상** 모든 import 문은 파일 상단(모듈 레벨)에 배치
- **절대** 함수 내부에서 import 사용 금지
- **항상** pylint 주석은 파일 최상단에 통합 배치 (모듈 docstring 바로 아래)
- **절대** pylint 주석을 코드 라인 옆이나 함수 내부에 배치 금지

### **명명 규칙**
- **항상** 함수, 변수, 파일명에 `snake_case` 사용
- **항상** 클래스명에 `PascalCase` 사용
- **항상** 상수에 `UPPER_CASE` 사용
- **절대** 널리 알려지지 않은 약어 사용 금지
- **항상** 목적을 명확히 나타내는 설명적 이름 사용

### **문서화 표준**
- **항상** 모든 함수와 클래스에 포괄적인 한국어 docstring 작성
- **항상** 복잡한 함수/클래스에는 Args, Returns, Raises 섹션을 필수로 작성
- **허용** 단순 getter/setter, 람다, 자명한 함수에는 docstring 생략 허용
- **항상** 목적과 기능을 설명하는 모듈 레벨 docstring 작성
- **항상** 모든 문서 내용에 한국어 사용

## 🚫 **핵심: 절대 하지 말아야 할 것들**

### **코드 품질 위반**
- **절대** 적절한 종료 조건 없는 무한 루프 생성 금지
- **절대** 적절한 근거 없이 pylint 경고 무시 금지
- **절대** 상수 없이 매직 넘버 사용 금지
- **가능하면** 함수는 50줄 이하로 유지, **80줄 이상이면 반드시 리팩토링 검토**
- **절대** 상태 관리에 전역 변수 사용 금지

### **예외 처리 규칙**
- **기본** 일반적인 오류 처리에는 `except Exception:` 사용
- **항상** 예외 객체는 `exception` 변수명 사용 (snake_case)
- **항상** 의미 있는 오류 메시지와 컨텍스트 제공

### **코드 스타일 및 관리 도구**
- **권장** pylint 등 코드 스타일 자동화 도구 사용
- **절대** pylint 주석을 코드 라인 옆에 배치 금지
- **절대** pylint 주석을 함수 내부에 배치 금지
- **항상** pylint 주석은 파일 최상단에 통합 배치

### **Print문 관련 규칙**
- **허용** print문은 상수화하지 말고 하드코딩된 문자열 사용
- **허용** print문에서 f-string 사용하여 동적 값 포함 가능
- **권장** print문에 이모지와 카테고리 표시 사용 (예: "❌ [오류]", "✅ [완료]")
- **허용** print문에서 Error, Message 상수 대신 직접 문자열 사용

### **테스트 위반**
- **절대** 적절한 모킹 없이 테스트 작성 금지
- **절대** 엣지 케이스와 오류 조건 테스트 건너뛰기 금지
- **절대** 단위 테스트에서 실제 웹 브라우저 사용 금지
- **절대** 외부 서비스에 의존하는 테스트 작성 금지

## 📋 **필수 패턴들**

### **함수 정의 템플릿**
```python
def function_name(param1: str, param2: int) -> str:
    """
    함수의 상세한 설명 (한글)

    Args:
        param1 (str): 매개변수1의 상세 설명
        param2 (int): 매개변수2의 상세 설명

    Returns:
        str: 반환값의 상세 설명

    Raises:
        ValueError: param1이 None이거나 빈 문자열인 경우
        TypeError: param2가 정수가 아닌 경우
        FileNotFoundError: 필요한 파일을 찾을 수 없는 경우
        TimeoutException: 요소를 찾을 수 없거나 로딩 시간 초과
        NoSuchElementException: 지정된 요소가 페이지에 존재하지 않는 경우
    """
    # 함수 로직
    return result
```

### **간단한 함수 템플릿 (docstring 생략 허용)**
```python
def get_current_time() -> str:
    """현재 시간을 문자열로 반환"""
    return datetime.now().strftime("%Y-%m-%d %H:%M:%S")

# 또는 자명한 경우 docstring 생략 가능
def is_valid(value: str) -> bool:
    return value is not None and len(value) > 0
```

### **클래스 정의 템플릿**
```python
class ClassName:
    """
    클래스의 목적과 기능 설명 (한글)

    Attributes:
        attribute1 (type): 속성1 설명
        attribute2 (type): 속성2 설명
    """

    def __init__(self, param1: str):
        """
        초기화 메서드 설명

        Args:
            param1 (str): 초기화 매개변수 설명
        """
        self.attribute1 = param1
```

### **상수 정의 템플릿**
```python
class CategoryName:
    """
    카테고리별 상수 그룹 설명 (한글)
    """
    CONSTANT_1 = "value1"
    CONSTANT_2 = "value2"
```

### **예외 처리 템플릿**
```python
# 일반적인 경우 - 포괄적 예외 처리
try:
    result = perform_action()
    return result
except Exception as exception:
    print(f"❌ [오류] 발생한 오류 내용: {exception}")
    return None
```

## 🧪 **테스트 요구사항**

### **테스트 클래스 구조**
```python
class TestModuleName(unittest.TestCase):
    """모듈명 테스트 클래스"""

    def setUp(self):
        """각 테스트 실행 전 설정"""
        self.mock_driver = MagicMock()
        self.test_data = {"key": "value"}

    def tearDown(self):
        """각 테스트 실행 후 정리"""
        # 테스트 데이터 정리
        if hasattr(self, 'temp_files'):
            for file_path in self.temp_files:
                if os.path.exists(file_path):
                    os.remove(file_path)

    def test_function_name_success(self):
        """함수명 성공 케이스 테스트"""
        # Given
        expected = "expected_result"
        input_data = "test_input"

        # When
        result = function_name(input_data)

        # Then
        self.assertEqual(result, expected)

    def test_function_name_with_invalid_input(self):
        """함수명 잘못된 입력 테스트"""
        # Given
        invalid_input = None

        # When & Then
        with self.assertRaises(ValueError):
            function_name(invalid_input)

    def test_function_name_edge_case(self):
        """함수명 경계값 테스트"""
        # Given
        edge_case_input = ""

        # When
        result = function_name(edge_case_input)

        # Then
        self.assertIsNotNone(result)
        self.assertEqual(result, "default_value")
```

### **Mock 사용 패턴**
```python
@patch('module.external_dependency')
@patch('builtins.print')
def test_with_multiple_mocks(self, mock_print, mock_external):
    """여러 mock을 사용한 테스트"""
    # Given
    mock_external.return_value = "mocked_result"
    expected_calls = 1

    # When
    result = test_function()

    # Then
    self.assertEqual(result, "mocked_result")
    mock_external.assert_called_once()
    self.assertEqual(mock_print.call_count, expected_calls)
```

## 🎨 **코드 품질 강화**

### **Pylint 설정**
- **항상** Pylint 비활성화 주석을 파일 최상단에 배치 (모듈 레벨 docstring 바로 아래)
- **절대** 코드 라인 옆에 pylint 주석 배치 금지
- **절대** 함수 내부에 pylint 주석 배치 금지
- **항상** 100자 이상 라인에 `# pylint: disable=line-too-long` 사용
- **항상** 상수 클래스에 `# pylint: disable=too-few-public-methods` 사용
- **항상** 포괄적 예외 처리에 `# pylint: disable=broad-exception-caught` 사용
- **항상** 불필요한 pass 문에 `# pylint: disable=unnecessary-pass` 사용

### **Pylint 주석 배치 패턴**
```python
"""
모듈 설명 (한글)
"""

# pylint: disable=line-too-long, broad-exception-caught, unnecessary-pass

# Standard library imports
import json
import os

def complex_function(param1: str, param2: int, param3: dict, param4: list) -> tuple:
    """
    복잡한 함수의 상세한 설명 (한글)

    Args:
        param1 (str): 매개변수1의 상세 설명
        param2 (int): 매개변수2의 상세 설명
        param3 (dict): 매개변수3의 상세 설명
        param4 (list): 매개변수4의 상세 설명

    Returns:
        tuple: 반환값의 상세 설명

    Raises:
        ValueError: param1, param2, param3, param4 중 하나라도 None이거나 올바르지 않은 경우
        TypeError: 매개변수 타입이 올바르지 않은 경우
        TimeoutException: 처리 시간이 초과된 경우
        Exception: 기타 예외 발생 시 (포괄적 예외 처리)
    """
    try:
        # 복잡한 로직으로 인한 긴 라인
        result = some_very_long_function_name_that_exceeds_limit(param1, param2, param3, param4)
        return result
    except Exception as exception:
        print(f"❌ [오류] 처리 실패: {exception}")
        return None, None
```

### **상수 클래스 Pylint 설정**
```python
class ApiEndpoints:
    """
    API 엔드포인트 상수들
    """
    BASE_URL = "https://api.example.com"
    LOGIN = f"{BASE_URL}/auth/login"
    USERS = f"{BASE_URL}/users"
    PRODUCTS = f"{BASE_URL}/products"
```

### **라인 길이 관리**
- **최대** 라인 길이: 100자
- **사용** 긴 표현식의 라인 연속
- **분할** 긴 함수 호출을 여러 라인으로
- **사용** 라인 연속을 위한 괄호 활용

### **Import 조직**
```python
# Standard library imports
import json
import os
import re
import time
from datetime import datetime
from pathlib import Path
from typing import Any, Dict, List, Optional, Tuple, Union

# Third-party imports
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

# Local application imports
from config.constants import ApiEndpoints, Message, Time, XPath
from utils.actions import click_element, navigate_to_url
from utils.helpers import format_date, validate_input
```

## 🔍 **오류 처리 전략**

### **예외 처리 규칙**
- **기본** 포괄적인 오류 처리를 위해 `except Exception:` 사용
- **필수** 특정 비즈니스 로직이 필요한 경우에만 구체적 예외 타입 사용
- **항상** 의미 있는 오류 메시지와 컨텍스트 제공
- **항상** 예외 객체에 snake_case 변수명 사용 (`exception` not `e`)
- **권장** 함수명, 입력값 등 디버깅에 도움되는 컨텍스트 포함

### **사용자 친화적 오류 메시지**
```python
class ErrorMessages:
    """사용자 친화적 오류 메시지 템플릿"""
    ELEMENT_NOT_FOUND = "❌ [오류] 요소를 찾을 수 없습니다: {element_name} (함수: {function_name})"
    NETWORK_ERROR = "❌ [오류] 네트워크 연결 문제: {url} (상태코드: {status_code})"
    TIMEOUT_ERROR = "❌ [오류] 시간 초과: {operation} (대기시간: {timeout}초)"
    VALIDATION_ERROR = "❌ [오류] 데이터 검증 실패: {field} (입력값: {value})"
    FILE_ERROR = "❌ [오류] 파일 작업 실패: {file_path} (작업: {operation})"
```

## 🛡️ **보안 고려사항**

### **데이터 보호**
- **절대** 민감한 정보(비밀번호, API 키) 하드코딩 금지
- **필수** 환경 변수나 설정 파일 사용
- **항상** 사용자 입력 검증 및 살균화
- **절대** 민감한 정보 로깅 금지

### **환경 변수 관리**
```python
import os
from pathlib import Path
from dotenv import load_dotenv

class Config:
    """환경 변수 기반 설정 관리"""

    def __init__(self):
        # .env 파일 로드
        env_path = Path('.') / '.env'
        load_dotenv(dotenv_path=env_path)

    @property
    def api_key(self) -> str:
        """API 키 반환"""
        key = os.getenv('API_KEY')
        if not key:
            raise ValueError("API_KEY 환경 변수가 설정되지 않았습니다")
        return key

    @property
    def database_url(self) -> str:
        """데이터베이스 URL 반환"""
        url = os.getenv('DATABASE_URL', 'sqlite:///default.db')
        return url
```

### **웹 보안 (크롤링/자동화)**
- **항상** robots.txt 확인 및 준수
- **필수** 요청 간 적절한 지연 (1-2초)
- **권장** User-Agent 헤더 설정
- **절대** 과도한 요청으로 서버 부하 유발 금지

## 📈 **성능 최적화**

### **WebDriver 최적화**
- **항상** 명시적 대기 (WebDriverWait) 사용
- **필수** WebDriver 인스턴스 정리 (`driver.quit()`)

## 📝 **커밋 및 버전 관리**

### **커밋 메시지 형식 (한글)**
```
타입: 간단한 설명 (#이슈번호)

상세 설명:
- 변경된 내용 1
- 변경된 내용 2
- 수정된 버그나 추가된 기능

Breaking Changes: (있는 경우)
- 호환성이 깨지는 변경사항

관련 이슈: #123, #456
```

## 🎯 **우선순위 및 강제 사항**

### **Critical (즉시 수정해야 함)**
1. 보안 취약점 (하드코딩된 자격 증명, SQL 인젝션 등)
2. 무한 루프 또는 메모리 누수
3. 리소스 누수 (파일 핸들, WebDriver 등)
4. 데이터 손실 위험이 있는 코드

### **High (커밋 전 수정)**
1. 누락된 docstring (복잡한 함수/클래스)
2. Pylint 오류 (경고는 허용)
3. 테스트 실패
4. 코드 스타일 위반
5. 처리되지 않은 예외

### **Medium (다음 스프린트에서 수정)**
1. 테스트 커버리지 부족 (80% 미만)
2. 복잡한 함수 (80줄 이상)
3. 코드 중복
4. 타입 힌트 누락
5. 성능 최적화 기회

### **Low (기술 부채 - 장기적 개선)**
1. 코드 주석 개선
2. 변수명 일관성
3. 문서화 개선
4. 미사용 코드 정리
5. 사소한 최적화

## 📝 **README.md 작성 규칙**

### **README.md 내용 제한**
- **필수** README.md에는 다음 3개 섹션만 포함:
  1. **프로젝트 개요** - 프로젝트 소개 및 목적
  2. **주요 기능** - 메인 메뉴 7개 기능 설명
  3. **프로젝트 구조** - 디렉토리 구조 및 파일 설명
- **절대** 설치 및 설정, 사용법, 문서화, 개발자 정보 등 추가 섹션 포함 금지
- **항상** 간결하고 핵심적인 내용만 유지

### **README.md 구조 템플릿**
```markdown
# 🚀 Mireu Macro

> 프로젝트 설명

[배지들]

---

## 🎯 프로젝트 개요

프로젝트 소개 및 목적

---

## ⚠️ 중요 안내사항

사용 주의사항

---

## 🚀 주요 기능

### **메인 메뉴 (7개 기능)**

1. 기능1
2. 기능2
...

---

## 📁 프로젝트 구조

<details>
<summary>📂 상세 디렉토리 구조 보기</summary>

```
디렉토리 구조
```

</details>
```

## 🚫 **Git 작업 규칙**

### **커밋 및 푸시**
- **절대** 사용자가 직접 요청하지 않은 커밋/푸시 금지
- **항상** 사용자가 "커밋 후 푸시"라고 명시적으로 요청할 때만 실행
- **기본** 변경사항 준비 후 사용자 요청 대기
- **필수** 사용자 승인 후에만 Git 작업 진행

### **Git 작업 순서**
1. 코드 변경사항 준비
2. 사용자에게 변경사항 설명
3. 사용자 요청 대기
4. 사용자가 "커밋 후 푸시" 요청 시에만 실행

**기억하세요: 이 규칙들은 코드 품질, 유지보수성, 보안성을 보장하기 위해 설계되었습니다. Mireu Macro 프로젝트의 높은 표준을 유지하기 위해 일관되게 적용해주세요.**
